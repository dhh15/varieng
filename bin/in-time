#!/usr/bin/env python

import collections
import colorsys
import glob
import math
import os.path
import subprocess
import sys
import numpy as np
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot

ROBUSTNESS = 1

font = 12.0
lw = 1.0

width = 5
height = 3
bottom = 0.3
left = 0.7
top = 0.15
right = 0.2

alpha1 = 0.2
alpha2 = 0.2
cols = [
    '#808080',
    colorsys.hsv_to_rgb(20.0/360.0, 0.90, 1.00),
    colorsys.hsv_to_rgb(230.0/360.0, 0.85, 0.85),
    '#000000',
]

matplotlib.rcParams.update({
    "font.size": font,
    "legend.fontsize": 10,
    "font.family": "sans-serif",
    "mathtext.default": "it",
    "lines.linewidth": lw,
    "patch.linewidth": lw,
    "lines.markeredgewidth": lw,
    "axes.linewidth": lw,
    "axes.titlesize": font,
    "axes.labelsize": font,
})


def parse(l):
    return l.rstrip('\r\n').split('\t')


class File:
    def __init__(self, head):
        self.head = head
        self.rows = []
        self.map = {}
        for i,h in enumerate(head):
            assert h not in self.map
            self.map[h] = i

    def write(self, filename):
        with open(filename, 'w') as f:
            writeline(f, self.head)
            for r in self.rows:
                writeline(f, r)

    def numeric(self, hh):
        ii = [ self.map[h] for h in hh ]
        for r in self.rows:
            for i in ii:
                r[i] = int(r[i])

    def columns(self, hh):
        ii = [ self.map[h] for h in hh ]
        return [ [ r[i] for i in ii ] for r in self.rows ]

    def hash(self, h):
        i = self.map[h]
        self.index = {}
        for r in self.rows:
            key = r[i]
            assert i not in self.index
            self.index[key] = r

    def get_field(self, key, h):
        i = self.map[h]
        return self.index[key][i]


def read(filename):
    with open(filename) as f:
        fi = File(parse(f.readline()))
        for l in f:
            fi.rows.append(parse(l))
    return fi


def get_hits(terms):
    files = glob.glob('output/semicleaned-data/*.txt')
    keys = []
    for i,f in enumerate(files):
        head, tail = os.path.split(f)
        base, ext = os.path.splitext(tail)
        keys.append(base)
    hits = {}
    for key in keys:
        hits[key] = []
    for term in terms:
        out = subprocess.check_output(['gegrep', '-c', '-i', '--', term] + files)
        rows = out.split('\n')
        assert(len(rows) == len(files) + 1)
        assert(rows[-1] == '')
        for i,key in enumerate(keys):
            row = rows[i]
            expect = files[i] + ':'
            assert row.startswith(expect)
            result = int(row[len(expect):].rstrip())
            hits[key].append(result)
    return hits


def prettydescr(descr):
    if len(descr) == 0:
        return 'all'
    else:
        return ', '.join(descr)


def process_column(term, hits, data, j):
    cum = [ [] for l in range(ROBUSTNESS+1) ]
    individual = collections.Counter()
    total = 0
    for year, key, sender, recipient in data:
        if j is None or hits[key][j] > 0:
            total += 1
            individual[sender] += 1
        for i in range(ROBUSTNESS+1):
            top = sum([count for key,count in individual.most_common(i)])
            cum[i].append(float(total - top))
    assert cum[0][-1] == total
    for i in range(ROBUSTNESS+1):
        cum[i] = np.array(cum[i])
        if total > 0:
            cum[i] /= total
    return (term, total, cum)


def process_data(terms, hits, data):
    years = [ r[0] for r in data ]
    m = len(terms)
    n = len(years)
    result = []
    result.append(process_column('all', hits, data, None))
    for j in range(m):
        result.append(process_column(terms[j], hits, data, j))
    return result


def plot(plotname, resultlist):
    yearrange = []
    for descr, data, result in resultlist:
        years = [ r[0] for r in data ]
        yearrange.append(min(years))
        yearrange.append(max(years))
    minyear = min(yearrange)
    maxyear = max(yearrange)
    yearspan = maxyear - minyear
    yearmargin = 0.05*yearspan

    nf = len(resultlist)
    fheight = nf * height
    SPP = matplotlib.figure.SubplotParams(
        left=left/width, right=1.0 - right/width,
        bottom=bottom/fheight, top=1.0 - top/fheight,
        hspace=nf*(top+bottom)/fheight,
    )
    fig = matplotlib.pyplot.figure(figsize=(width, fheight), subplotpars=SPP)
    for i,to_plot in enumerate(resultlist):
        descr, data, result = to_plot
        ax = fig.add_subplot(nf, 1, 1 + i)
        ax.set_xlim((minyear - yearmargin, maxyear + yearmargin))
        ax.set_ylim((-0.05, +1.05))
        xx = [ r[0] for r in data ]
        plots = []
        legends = []
        for i in reversed(range(ROBUSTNESS)):
            alpha = alpha1 + (ROBUSTNESS - i - 1) * alpha2
            for j,oneresult in enumerate(result):
                what, total, yyy = oneresult
                yy0 = yyy[i+1]
                yy1 = yyy[i]
                col = cols[j % len(cols)]
                ax.fill_between(xx, yy0, yy1, color=col, edgecolor="none", alpha=alpha)
        for j,oneresult in enumerate(result):
            what, total, yyy = oneresult
            yy = yyy[0]
            col = cols[j % len(cols)]
            p, = ax.plot(xx, yy, color=col)
            plots.append(p)
            legends.append('{}: {}'.format(what, total))
        ax.text(minyear, 0.97, prettydescr(descr), verticalalignment='top')
        leg = ax.legend(plots, legends, loc='lower right')
        leg.get_frame().set_linewidth(0.0)
    fig.savefig(plotname)
    matplotlib.pyplot.close(fig)


def read_input():
    letter = read('../dhh15/ceec-metadata/database_letter.txt')
    person = read('../dhh15/ceec-metadata/database_person.txt')
    letter.numeric(['Year', 'WordCount'])
    person.hash('PersonCode')
    return letter, person


def driver(constraints, plotname, terms):
    hits = get_hits(terms)
    letter, person = read_input()
    datalist = initial_data(letter, person)
    for c in constraints:
        newdatalist = []
        for descr, data in datalist:
            newdatalist.extend(c(descr, data, letter, person))
        datalist = newdatalist
    resultlist = []
    for descr, data in datalist:
        result = process_data(terms, hits, data)
        resultlist.append((descr, data, result))
    plot(plotname, resultlist)


def initial_data(letter, person):
    datalist = []
    descr = []
    data = letter.columns(['Year', 'LetterID', 'Sender', 'Recipient'])
    data = sorted(data)
    datalist.append((descr, data))
    return datalist


def c_sender(field, values):
    def filter_sender(descr0, data0, letter, person):
        datalist = []
        for cond, label in values:
            descr = descr0 + [label]
            data = []
            for year, key, sender, recipient in data0:
                if cond(person.get_field(sender, field)):
                    data.append([year, key, sender, recipient])
            datalist.append((descr, data))
        return datalist
    return filter_sender


def eq(y):
    return lambda x: x == y

def neq(y):
    return lambda x: x != y


CONSTRAINT = {
    '-sex':    c_sender('Sex',    [ (eq('F'), 'female'), (eq('M'), 'male')   ]),
    '-region': c_sender('Region', [ (eq('L'), 'London'), (neq('L'), 'other') ]),
}

def main():
    myname = sys.argv[0]
    args = sys.argv[1:]
    constraints = []
    while len(args) > 0 and args[0].startswith('-'):
        c = args.pop(0)
        if c not in CONSTRAINT:
            sys.exit('unknown option: {}'.format(c))
        constraints.append(CONSTRAINT[c])
    if len(args) < 2:
        sys.exit('usage: {} [CONSTRAINT] ... PLOTNAME REGEX ...'.format(myname))
    plotname = args.pop(0)
    print '-{}'.format(plotname)
    sys.stdout.flush()
    driver(constraints, plotname, args)
    print '+{}'.format(plotname)
    sys.stdout.flush()

main()
