#!/usr/bin/env python

import colorsys
import glob
import math
import multiprocessing
import os.path
import subprocess
import sys
# import numpy
# import matplotlib
# matplotlib.use('Agg')
# import matplotlib.pyplot

font = 12.0
lw = 1.0

width = 5
height = 3
bottom = 0.25
left = 0.7
top = 0.1
right = 0.2

cola = colorsys.hsv_to_rgb(20.0/360.0, 0.90, 1.00)
colb = colorsys.hsv_to_rgb(230.0/360.0, 0.85, 0.85)
white = '#ffffff'

# matplotlib.rcParams.update({
#     "font.size": font,
#     "legend.fontsize": font,
#     "font.family": "sans-serif",
#     "mathtext.default": "it",
#     "lines.linewidth": lw,
#     "patch.linewidth": lw,
#     "lines.markeredgewidth": lw,
#     "axes.linewidth": lw,
#     "axes.titlesize": font,
#     "axes.labelsize": font,
# })


def parse(l):
    return l.rstrip('\r\n').split('\t')


class File:
    def __init__(self, head):
        self.head = head
        self.rows = []
        self.map = {}
        for i,h in enumerate(head):
            assert h not in self.map
            self.map[h] = i

    def write(self, filename):
        with open(filename, 'w') as f:
            writeline(f, self.head)
            for r in self.rows:
                writeline(f, r)

    def numeric(self, hh):
        ii = [ self.map[h] for h in hh ]
        for r in self.rows:
            for i in ii:
                r[i] = int(r[i])

    def columns(self, hh):
        ii = [ self.map[h] for h in hh ]
        return [ [ r[i] for i in ii ] for r in self.rows ]


def read(filename):
    print('Reading: {}'.format(filename))
    with open(filename) as f:
        fi = File(parse(f.readline()))
        for l in f:
            fi.rows.append(parse(l))
    return fi


def get_results(terms):
    files = glob.glob('ceec-normalised/*.txt')
    keys = []
    for i,f in enumerate(files):
        head, tail = os.path.split(f)
        base, ext = os.path.splitext(tail)
        keys.append(base)
    results = {}
    for key in keys:
        results[key] = []
    for term in terms:
        print('Finding: {}'.format(term))
        out = subprocess.check_output(['gegrep', '-c', '-i', '--', term] + files)
        rows = out.split('\n')
        assert(len(rows) == len(files) + 1)
        assert(rows[-1] == '')
        for i,key in enumerate(keys):
            row = rows[i]
            expect = files[i] + ':'
            assert row.startswith(expect)
            result = int(row[len(expect):].rstrip())
            results[key].append(result)
    return results


def main(terms):
    results = get_results(terms)
    letter = read('ceec-metadata/database_letter.txt')
    person = read('ceec-metadata/database_person.txt')
    letter.numeric(['Year', 'WordCount'])
    by_year = letter.columns(['Year', 'LetterID', 'Sender', 'Recipient', 'WordCount'])
    by_year = sorted(by_year)
    for r in by_year:
        pass
        # print(r)


terms = sys.argv[1:]
main(terms)

